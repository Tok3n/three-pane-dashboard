// Generated by CoffeeScript 1.7.1
(function() {
  var AppModel, BaseModel, CategoryModel, DeviceModel, IntegrationModel, ItemModel, PhoneModel,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  BaseModel = (function(_super) {
    __extends(BaseModel, _super);

    function BaseModel() {
      return BaseModel.__super__.constructor.apply(this, arguments);
    }

    return BaseModel;

  })(Backbone.Model);

  CategoryModel = (function(_super) {
    __extends(CategoryModel, _super);

    function CategoryModel() {
      return CategoryModel.__super__.constructor.apply(this, arguments);
    }

    return CategoryModel;

  })(BaseModel);

  ItemModel = (function(_super) {
    __extends(ItemModel, _super);

    function ItemModel() {
      return ItemModel.__super__.constructor.apply(this, arguments);
    }

    return ItemModel;

  })(BaseModel);

  AppModel = (function(_super) {
    __extends(AppModel, _super);

    function AppModel() {
      return AppModel.__super__.constructor.apply(this, arguments);
    }

    return AppModel;

  })(ItemModel);

  DeviceModel = (function(_super) {
    __extends(DeviceModel, _super);

    function DeviceModel() {
      return DeviceModel.__super__.constructor.apply(this, arguments);
    }

    return DeviceModel;

  })(ItemModel);

  PhoneModel = (function(_super) {
    __extends(PhoneModel, _super);

    function PhoneModel() {
      return PhoneModel.__super__.constructor.apply(this, arguments);
    }

    return PhoneModel;

  })(ItemModel);

  IntegrationModel = (function(_super) {
    __extends(IntegrationModel, _super);

    function IntegrationModel() {
      return IntegrationModel.__super__.constructor.apply(this, arguments);
    }

    return IntegrationModel;

  })(ItemModel);

}).call(this);
